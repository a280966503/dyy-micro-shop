// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/areas/goods.proto

/*
Package typeTemplate is a generated protocol buffer package.

It is generated from these files:
	proto/areas/goods.proto

It has these top-level messages:
	ReqSearch
	ReqIds
	RespSearch
	Rows
	Models
	Resp
*/
package typeTemplate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TypeTemplate service

type TypeTemplateService interface {
	Search(ctx context.Context, in *ReqSearch, opts ...client.CallOption) (*RespSearch, error)
	Add(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error)
	Delete(ctx context.Context, in *ReqIds, opts ...client.CallOption) (*Resp, error)
	FindOne(ctx context.Context, in *Rows, opts ...client.CallOption) (*Rows, error)
	Update(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error)
}

type typeTemplateService struct {
	c    client.Client
	name string
}

func NewTypeTemplateService(name string, c client.Client) TypeTemplateService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "typetemplate"
	}
	return &typeTemplateService{
		c:    c,
		name: name,
	}
}

func (c *typeTemplateService) Search(ctx context.Context, in *ReqSearch, opts ...client.CallOption) (*RespSearch, error) {
	req := c.c.NewRequest(c.name, "TypeTemplate.Search", in)
	out := new(RespSearch)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeTemplateService) Add(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "TypeTemplate.Add", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeTemplateService) Delete(ctx context.Context, in *ReqIds, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "TypeTemplate.Delete", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeTemplateService) FindOne(ctx context.Context, in *Rows, opts ...client.CallOption) (*Rows, error) {
	req := c.c.NewRequest(c.name, "TypeTemplate.FindOne", in)
	out := new(Rows)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeTemplateService) Update(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "TypeTemplate.Update", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TypeTemplate service

type TypeTemplateHandler interface {
	Search(context.Context, *ReqSearch, *RespSearch) error
	Add(context.Context, *Rows, *Resp) error
	Delete(context.Context, *ReqIds, *Resp) error
	FindOne(context.Context, *Rows, *Rows) error
	Update(context.Context, *Rows, *Resp) error
}

func RegisterTypeTemplateHandler(s server.Server, hdlr TypeTemplateHandler, opts ...server.HandlerOption) error {
	type typeTemplate interface {
		Search(ctx context.Context, in *ReqSearch, out *RespSearch) error
		Add(ctx context.Context, in *Rows, out *Resp) error
		Delete(ctx context.Context, in *ReqIds, out *Resp) error
		FindOne(ctx context.Context, in *Rows, out *Rows) error
		Update(ctx context.Context, in *Rows, out *Resp) error
	}
	type TypeTemplate struct {
		typeTemplate
	}
	h := &typeTemplateHandler{hdlr}
	return s.Handle(s.NewHandler(&TypeTemplate{h}, opts...))
}

type typeTemplateHandler struct {
	TypeTemplateHandler
}

func (h *typeTemplateHandler) Search(ctx context.Context, in *ReqSearch, out *RespSearch) error {
	return h.TypeTemplateHandler.Search(ctx, in, out)
}

func (h *typeTemplateHandler) Add(ctx context.Context, in *Rows, out *Resp) error {
	return h.TypeTemplateHandler.Add(ctx, in, out)
}

func (h *typeTemplateHandler) Delete(ctx context.Context, in *ReqIds, out *Resp) error {
	return h.TypeTemplateHandler.Delete(ctx, in, out)
}

func (h *typeTemplateHandler) FindOne(ctx context.Context, in *Rows, out *Rows) error {
	return h.TypeTemplateHandler.FindOne(ctx, in, out)
}

func (h *typeTemplateHandler) Update(ctx context.Context, in *Rows, out *Resp) error {
	return h.TypeTemplateHandler.Update(ctx, in, out)
}
