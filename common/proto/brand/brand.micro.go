// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/areas/content.proto

/*
Package login is a generated protocol buffer package.

It is generated from these files:
	proto/areas/content.proto

It has these top-level messages:
	ReqBrand
	ReqIds
	RespBrand
	OptionList
	Model
	Rows
	Req
	Resp
*/
package brand

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Brand service

type BrandService interface {
	//    rpc MicroSeller(ReqSeller)returns(RespSeller){}
	Search(ctx context.Context, in *ReqBrand, opts ...client.CallOption) (*RespBrand, error)
	Save(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error)
	FindById(ctx context.Context, in *Rows, opts ...client.CallOption) (*Rows, error)
	Delete(ctx context.Context, in *ReqIds, opts ...client.CallOption) (*Resp, error)
	Update(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error)
	SelectOptionList(ctx context.Context, in *Req, opts ...client.CallOption) (*OptionList, error)
}

type brandService struct {
	c    client.Client
	name string
}

func NewBrandService(name string, c client.Client) BrandService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "login"
	}
	return &brandService{
		c:    c,
		name: name,
	}
}

func (c *brandService) Search(ctx context.Context, in *ReqBrand, opts ...client.CallOption) (*RespBrand, error) {
	req := c.c.NewRequest(c.name, "Brand.Search", in)
	out := new(RespBrand)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandService) Save(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Brand.Save", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandService) FindById(ctx context.Context, in *Rows, opts ...client.CallOption) (*Rows, error) {
	req := c.c.NewRequest(c.name, "Brand.FindById", in)
	out := new(Rows)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandService) Delete(ctx context.Context, in *ReqIds, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Brand.Delete", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandService) Update(ctx context.Context, in *Rows, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Brand.Update", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandService) SelectOptionList(ctx context.Context, in *Req, opts ...client.CallOption) (*OptionList, error) {
	req := c.c.NewRequest(c.name, "Brand.SelectOptionList", in)
	out := new(OptionList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Brand service

type BrandHandler interface {
	//    rpc MicroSeller(ReqSeller)returns(RespSeller){}
	Search(context.Context, *ReqBrand, *RespBrand) error
	Save(context.Context, *Rows, *Resp) error
	FindById(context.Context, *Rows, *Rows) error
	Delete(context.Context, *ReqIds, *Resp) error
	Update(context.Context, *Rows, *Resp) error
	SelectOptionList(context.Context, *Req, *OptionList) error
}

func RegisterBrandHandler(s server.Server, hdlr BrandHandler, opts ...server.HandlerOption) error {
	type brand interface {
		Search(ctx context.Context, in *ReqBrand, out *RespBrand) error
		Save(ctx context.Context, in *Rows, out *Resp) error
		FindById(ctx context.Context, in *Rows, out *Rows) error
		Delete(ctx context.Context, in *ReqIds, out *Resp) error
		Update(ctx context.Context, in *Rows, out *Resp) error
		SelectOptionList(ctx context.Context, in *Req, out *OptionList) error
	}
	type Brand struct {
		brand
	}
	h := &brandHandler{hdlr}
	return s.Handle(s.NewHandler(&Brand{h}, opts...))
}

type brandHandler struct {
	BrandHandler
}

func (h *brandHandler) Search(ctx context.Context, in *ReqBrand, out *RespBrand) error {
	return h.BrandHandler.Search(ctx, in, out)
}

func (h *brandHandler) Save(ctx context.Context, in *Rows, out *Resp) error {
	return h.BrandHandler.Save(ctx, in, out)
}

func (h *brandHandler) FindById(ctx context.Context, in *Rows, out *Rows) error {
	return h.BrandHandler.FindById(ctx, in, out)
}

func (h *brandHandler) Delete(ctx context.Context, in *ReqIds, out *Resp) error {
	return h.BrandHandler.Delete(ctx, in, out)
}

func (h *brandHandler) Update(ctx context.Context, in *Rows, out *Resp) error {
	return h.BrandHandler.Update(ctx, in, out)
}

func (h *brandHandler) SelectOptionList(ctx context.Context, in *Req, out *OptionList) error {
	return h.BrandHandler.SelectOptionList(ctx, in, out)
}
