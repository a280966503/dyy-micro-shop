// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/areas/specification.proto

/*
Package specification is a generated protocol buffer package.

It is generated from these files:
	proto/areas/specification.proto

It has these top-level messages:
	ReqSearch
	ReqIds
	RespSearch
	ReqAdd
	Rows
	Resp
*/
package specification

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Specification service

type SpecificationService interface {
	//    rpc MicroSeller(ReqSeller)returns(RespSeller){}
	Search(ctx context.Context, in *ReqSearch, opts ...client.CallOption) (*RespSearch, error)
	Add(ctx context.Context, in *ReqAdd, opts ...client.CallOption) (*Resp, error)
	Delete(ctx context.Context, in *ReqIds, opts ...client.CallOption) (*Resp, error)
	FindOne(ctx context.Context, in *Rows, opts ...client.CallOption) (*ReqAdd, error)
	Update(ctx context.Context, in *ReqAdd, opts ...client.CallOption) (*Resp, error)
}

type specificationService struct {
	c    client.Client
	name string
}

func NewSpecificationService(name string, c client.Client) SpecificationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "specification"
	}
	return &specificationService{
		c:    c,
		name: name,
	}
}

func (c *specificationService) Search(ctx context.Context, in *ReqSearch, opts ...client.CallOption) (*RespSearch, error) {
	req := c.c.NewRequest(c.name, "Specification.Search", in)
	out := new(RespSearch)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) Add(ctx context.Context, in *ReqAdd, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Specification.Add", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) Delete(ctx context.Context, in *ReqIds, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Specification.Delete", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) FindOne(ctx context.Context, in *Rows, opts ...client.CallOption) (*ReqAdd, error) {
	req := c.c.NewRequest(c.name, "Specification.FindOne", in)
	out := new(ReqAdd)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) Update(ctx context.Context, in *ReqAdd, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Specification.Update", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Specification service

type SpecificationHandler interface {
	//    rpc MicroSeller(ReqSeller)returns(RespSeller){}
	Search(context.Context, *ReqSearch, *RespSearch) error
	Add(context.Context, *ReqAdd, *Resp) error
	Delete(context.Context, *ReqIds, *Resp) error
	FindOne(context.Context, *Rows, *ReqAdd) error
	Update(context.Context, *ReqAdd, *Resp) error
}

func RegisterSpecificationHandler(s server.Server, hdlr SpecificationHandler, opts ...server.HandlerOption) error {
	type specification interface {
		Search(ctx context.Context, in *ReqSearch, out *RespSearch) error
		Add(ctx context.Context, in *ReqAdd, out *Resp) error
		Delete(ctx context.Context, in *ReqIds, out *Resp) error
		FindOne(ctx context.Context, in *Rows, out *ReqAdd) error
		Update(ctx context.Context, in *ReqAdd, out *Resp) error
	}
	type Specification struct {
		specification
	}
	h := &specificationHandler{hdlr}
	return s.Handle(s.NewHandler(&Specification{h}, opts...))
}

type specificationHandler struct {
	SpecificationHandler
}

func (h *specificationHandler) Search(ctx context.Context, in *ReqSearch, out *RespSearch) error {
	return h.SpecificationHandler.Search(ctx, in, out)
}

func (h *specificationHandler) Add(ctx context.Context, in *ReqAdd, out *Resp) error {
	return h.SpecificationHandler.Add(ctx, in, out)
}

func (h *specificationHandler) Delete(ctx context.Context, in *ReqIds, out *Resp) error {
	return h.SpecificationHandler.Delete(ctx, in, out)
}

func (h *specificationHandler) FindOne(ctx context.Context, in *Rows, out *ReqAdd) error {
	return h.SpecificationHandler.FindOne(ctx, in, out)
}

func (h *specificationHandler) Update(ctx context.Context, in *ReqAdd, out *Resp) error {
	return h.SpecificationHandler.Update(ctx, in, out)
}
