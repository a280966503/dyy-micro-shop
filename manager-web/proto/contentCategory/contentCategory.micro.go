// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/areas/contentCategory.proto

/*
Package contentCategory is a generated protocol buffer package.

It is generated from these files:
	proto/areas/contentCategory.proto

It has these top-level messages:
	Ids
	ReqContentCategory
	RespContentCategory
	ContentCategoryModel
	Req
	Resp
*/
package contentCategory

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ContentCategory service

type ContentCategoryService interface {
	Search(ctx context.Context, in *ReqContentCategory, opts ...client.CallOption) (*RespContentCategory, error)
	Add(ctx context.Context, in *ContentCategoryModel, opts ...client.CallOption) (*Resp, error)
	Delete(ctx context.Context, in *Ids, opts ...client.CallOption) (*Resp, error)
	FindOne(ctx context.Context, in *ContentCategoryModel, opts ...client.CallOption) (*ContentCategoryModel, error)
	FindAll(ctx context.Context, in *Req, opts ...client.CallOption) (*RespContentCategory, error)
}

type contentCategoryService struct {
	c    client.Client
	name string
}

func NewContentCategoryService(name string, c client.Client) ContentCategoryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "contentcategory"
	}
	return &contentCategoryService{
		c:    c,
		name: name,
	}
}

func (c *contentCategoryService) Search(ctx context.Context, in *ReqContentCategory, opts ...client.CallOption) (*RespContentCategory, error) {
	req := c.c.NewRequest(c.name, "ContentCategory.Search", in)
	out := new(RespContentCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCategoryService) Add(ctx context.Context, in *ContentCategoryModel, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "ContentCategory.Add", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCategoryService) Delete(ctx context.Context, in *Ids, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "ContentCategory.Delete", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCategoryService) FindOne(ctx context.Context, in *ContentCategoryModel, opts ...client.CallOption) (*ContentCategoryModel, error) {
	req := c.c.NewRequest(c.name, "ContentCategory.FindOne", in)
	out := new(ContentCategoryModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCategoryService) FindAll(ctx context.Context, in *Req, opts ...client.CallOption) (*RespContentCategory, error) {
	req := c.c.NewRequest(c.name, "ContentCategory.FindAll", in)
	out := new(RespContentCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContentCategory service

type ContentCategoryHandler interface {
	Search(context.Context, *ReqContentCategory, *RespContentCategory) error
	Add(context.Context, *ContentCategoryModel, *Resp) error
	Delete(context.Context, *Ids, *Resp) error
	FindOne(context.Context, *ContentCategoryModel, *ContentCategoryModel) error
	FindAll(context.Context, *Req, *RespContentCategory) error
}

func RegisterContentCategoryHandler(s server.Server, hdlr ContentCategoryHandler, opts ...server.HandlerOption) error {
	type contentCategory interface {
		Search(ctx context.Context, in *ReqContentCategory, out *RespContentCategory) error
		Add(ctx context.Context, in *ContentCategoryModel, out *Resp) error
		Delete(ctx context.Context, in *Ids, out *Resp) error
		FindOne(ctx context.Context, in *ContentCategoryModel, out *ContentCategoryModel) error
		FindAll(ctx context.Context, in *Req, out *RespContentCategory) error
	}
	type ContentCategory struct {
		contentCategory
	}
	h := &contentCategoryHandler{hdlr}
	return s.Handle(s.NewHandler(&ContentCategory{h}, opts...))
}

type contentCategoryHandler struct {
	ContentCategoryHandler
}

func (h *contentCategoryHandler) Search(ctx context.Context, in *ReqContentCategory, out *RespContentCategory) error {
	return h.ContentCategoryHandler.Search(ctx, in, out)
}

func (h *contentCategoryHandler) Add(ctx context.Context, in *ContentCategoryModel, out *Resp) error {
	return h.ContentCategoryHandler.Add(ctx, in, out)
}

func (h *contentCategoryHandler) Delete(ctx context.Context, in *Ids, out *Resp) error {
	return h.ContentCategoryHandler.Delete(ctx, in, out)
}

func (h *contentCategoryHandler) FindOne(ctx context.Context, in *ContentCategoryModel, out *ContentCategoryModel) error {
	return h.ContentCategoryHandler.FindOne(ctx, in, out)
}

func (h *contentCategoryHandler) FindAll(ctx context.Context, in *Req, out *RespContentCategory) error {
	return h.ContentCategoryHandler.FindAll(ctx, in, out)
}
